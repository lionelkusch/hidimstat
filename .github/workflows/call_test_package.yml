# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Tests

on:
  workflow_call:

jobs:
  build-test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # if on job fail all the other jobs are cancelled
      matrix:
        python-version: ["3.12", "3.13"] #CHECK: not forget to add new version of python
        os: [macos-latest] #, ubuntu-latest, windows-latest]
    
    # name for the file
    env:
      REPORT_NAME: ${{ matrix.python-version }}-os-${{ matrix.os }}

    steps:
    # Checkout to the branch for getting the ritgh code
    - uses: actions/checkout@v4
    # Install python
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    # Install dependency for running the tests
    - name: Install the dependance
      run: |
        python -m pip install --upgrade pip
        python -m pip install .[test]
    # Run the tests with coverage and report add this end
    # option for the retport test: --junitxml=... 
    # option for the coverage: --cov=. --cov-report=xml : 
    - name: Generate coverage report
      run: |
        python -m pytest --junitxml=junit/test-results-${REPORT_NAME}.xml --cov=. --cov-report=xml:cov/cov-${REPORT_NAME}.xml --md-report --md-report-output=test-results-${REPORT_NAME}.md
    - name: Upload md test result 
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: pytest-results-md-${{env.REPORT_NAME}}
        path: test-results-${{env.REPORT_NAME}}.md
    - name: Upload xml test result 
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: pytest-results-xml-${{env.REPORT_NAME}}
        path: junit/test-results-${{env.REPORT_NAME}}.xml
    - name: Upload coverage data
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: cov-results-${{env.REPORT_NAME}}
        path: cov/cov-${{env.REPORT_NAME}}.xml

  merge_md_test_data:
    needs: build-test
    runs-on: ubuntu-latest
    if: ${{ failure() }}
    steps:
    # get report from previous job 
    - name: Get data
      uses: actions/download-artifact@v4
      with:
        pattern: pytest-results-md-*-os-*
    # create a comment in the PR with the failling tests
    - name: Render the report to the PR when tests fail
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        header: test-report:macos-3.13                                                        #CHECK: need to be updated when new version are available
        recreate: true
        path: pytest-results-md-3.13-os-macos-latest/test-results-3.13-os-macos-latest.xml     #CHECK: need to be updated when new version are available
    # create a comment in the summary with the failling tests
    - name: Output reports to the job summary when tests fail
      shell: bash
      run: |
        if [ -f test-results-${REPORT_NAME}.md ]; then
          echo "<details><summary>Failed Test Report</summary>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          cat test-results-${REPORT_NAME}.md >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY
        fi

  merge_xml_test_data:
    needs: build-test
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
    # get report from previous job 
    - name: Get data
      uses: actions/download-artifact@v4
      with:
        pattern: pytest-results-xml-*-os-*
    # report the result with test-reporter 
    # For details see https://github.com/marketplace/actions/test-reporter
    - uses: dorny/test-reporter@v2
      with:
        artifact: pytest-results          # artifact name
        name: Test hidimstat              # Name of the check run which will be created
        path: '*/*.xml'                   # Path to test results (inside artifact .zip)
        reporter: jest-junit              # Format of test results
        list-tests: 'failed'              # list only failed tests
        list-suites: 'failed'             # list only failed tests

  merge_upload_coverage_data:
    needs: build-test
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
    # get coverage only for 1 job 
    - name: Get data
      uses: actions/download-artifact@v4
      with:
        pattern: cov-results-3.13-os-macos-latest  #CHECK: need to be updated when new version are available
    # Upload coverage report for Codecov
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        verbose: true
        files: cov-results-3.13-os-macos-latest/cov-3.13-os-macos-latest.xml    #CHECK: need to be updated when new version are available
  