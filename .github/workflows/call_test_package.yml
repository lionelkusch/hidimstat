# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Tests

on:
  workflow_call:

jobs:
  build-test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: True  # if on job fail all the other jobs are cancelled
      matrix:
        python-version: ["3.12", "3.13"] #CHECK: not forget to add new version of python
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    # Checkout to the branch for getting the ritgh code
    - uses: actions/checkout@v4
    # Install python
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    # Install dependency for running the tests
    - name: Install the dependance
      run: |
        python -m pip install --upgrade pip
        python -m pip install .[test]
    # Run the tests with coverage and report add this end
    # option for grouping by modules: --doctest-modules
    # option for the retport test: --junitxml=... 
    # option for the coverage: --cov=. --cov-report=xml : 
    - name: Generate coverage report
      run: |
        python -m pytest --doctest-modules --junitxml=junit/test-results-${{ matrix.python-version }}-os-${{ matrix.os }}.xml --cov=. --cov-report=xml:cov/cov-${{ matrix.python-version }}-os-${{ matrix.os }}.xml
    - name: Upload test result
      uses: actions/upload-artifact@v4
      with:
        name: pytest-results-${{ matrix.python-version }}-os-${{ matrix.os }}
        path: junit/test-results-${{ matrix.python-version }}-os-${{ matrix.os }}.xml
      if: ${{ always() }}
    - name: Upload coverage data
      uses: actions/upload-artifact@v4
      with:
        name: cov-results-${{ matrix.python-version }}-os-${{ matrix.os }}
        path: cov/cov-${{ matrix.python-version }}-os-${{ matrix.os }}.xml
      if: ${{ always() }}

  merge_upload_test_data:
    needs: build-test
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
    # get report from previous job 
    - name: Get data
      uses: actions/download-artifact@v4
      with:
        path: junit/
        pattern: pytest-results-*-os-*
    # Upload the report as artifact for being read by the workflow tests reports
    - name: Upload pytest test results
      uses: actions/upload-artifact@v4
      with:
        name: pytest-results
        path: junit/test-results-*.xml
      # Use always() to always run this step to publish test results when there are test failures

  merge_upload_coverage_data:
    needs: build-test
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
    # get coverage only for 1 job 
    - name: Get data
      uses: actions/download-artifact@v4
      with:
        path: cov/
        pattern: cov-results-3.13-os-ubuntu-latest  #CHECK: need to be updated when new version are available
    # Upload coverage report for Codecov
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        verbose: true
        files: cov/cov-3.13-os-ubuntu-latest.xml    #CHECK: need to be updated when new version are available
  