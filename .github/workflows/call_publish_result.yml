name: Tests

on:
  # Allows you to run this workflow from another workflow
  workflow_call:

# disable all the permission for the workflow
permissions: {}

jobs:
  commit_html_report:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
        commit_hash: ${{steps.auto_commit.outputs.commit_hash}}
    steps:
    - uses: actions/checkout@v4
      with:
        ref: 'report_test'
    - name: clean repository
      shell: bash
      run: |
        rm -rd *
    # get report from previous job 
    - name: Get data
      uses: actions/download-artifact@v4
      with:
        pattern: pytest-results-html-*-os-*
    - name: create tag name
      id: tag_name
      shell: bash
      run: |
        echo "TAG=PR${{github.event.number}}_doc" >> $GITHUB_OUTPUT
    # for more details about how to commit a file:
    # https://github.com/stefanzweifel/git-auto-commit-action
    - uses: stefanzweifel/git-auto-commit-action@v5
      id: auto_commit 
      with:
        file_pattern: '*/*.html'
        branch: 'report_test'
        commit_message: "PR${{github.event.number}}: ${{ github.sha }}\n branch: ${{github.head_ref}} commit: ${{ github.sha }}"
        tagging_message: ${{steps.tag_name.outputs.TAG}}
  
  merge_md_test_data:
    # for more details
    # https://github.com/thombashi/pytest-md-report
    needs: commit_html_report
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
    # get report from previous job 
    - name: Get data
      uses: actions/download-artifact@v4
      with:
        pattern: pytest-results-md-*-os-*
    # add manual link to render the HTML commit on the reporter_test branch
    # the rendering is based on the trick propose here: 
    # https://github.com/htmlpreview/htmlpreview.github.com
    # TODO add this report to the documentation generated with a PR
    - name: Update mardown
      shell: bash
      run: |
        for FOLDER in *;
        do 
        SUFFIX=$(echo $FOLDER | sed 's/pytest-results-md-//g');
        LINK="https://htmlpreview.github.io?https://github.com/${{github.repository}}/blob/${{needs.commit_html_report.outputs.commit_hash}}/pytest-results-html-${SUFFIX}/report-${SUFFIX}.html"
        echo -e "\n [HTML summary]($LINK)" >> ${FOLDER}/test-results-${SUFFIX}.md
        done
    # create a comment in the PR with the failling tests
    # for more details: https://github.com/marocchino/sticky-pull-request-comment
    - name: Render the report to the PR
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        header: test-report
        recreate: true
        path: ./pytest-results-md-3.13-os-macos-latest/test-results-3.13-os-macos-latest.md     #CHECK: need to be updated when new version are available
    # create a comment in the summary with the failling tests
    - name: Output reports to the job summary when tests fail
      shell: bash
      run: |
        for folder in *;
        do 
          echo "<details><summary>Failed Test Report: $folder</summary>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          cat $folder/*.md >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY
        done

  merge_upload_coverage_data:
    runs-on: ubuntu-latest
    steps:
    # get coverage only for 1 job 
    - name: Get data
      uses: actions/download-artifact@v4
      with:
        pattern: cov-results-3.13-os-macos-latest  #CHECK: need to be updated when new version are available
    # Upload coverage report for Codecov
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        verbose: true
        files: cov-results-3.13-os-macos-latest/cov-3.13-os-macos-latest.xml    #CHECK: need to be updated when new version are available